
---

# UnmanagedString Documentation

This document introduces the `UnmanagedString` struct and its associated functionality in the `MoreUnmanagedTypes` namespace. The struct is designed for storing and manipulating string data in unmanaged memory using UTF-8 encoding. It provides common string manipulation methods, a character enumerator, and conversion between unmanaged and managed strings.

---

## Basic Structure

- **Fields**
  - `byte* Ptr`  
    Points to the beginning of the UTF-8 encoded data in unmanaged memory.
  - `int Length`  
    The current length in bytes of the string (i.e., the length of the valid data).
  - `int Capacity`  
    The total allocated number of bytes, indicating the available memory capacity.

- **Constructors and Static Factory Methods**
  - `UnmanagedString(string s)`  
    Constructs an `UnmanagedString` from a given C# string. It encodes the string in UTF-8 and allocates the corresponding unmanaged memory.
  - `static UnmanagedString New()`  
    Returns an empty `UnmanagedString` (with default field values).
  - `static UnmanagedString WithCapacity(int capacity)`  
    Creates an `UnmanagedString` with the specified capacity and allocates unmanaged memory of the given size. When the capacity is 0, `Ptr` is set to `null`.

---

## Memory Management

- `void Free()`  
  Releases the unmanaged memory occupied by the instance and resets the relevant fields to their default values.

- `void EnsureCapacity(int required)`  
  Checks the current capacity; if insufficient, reallocates memory using a strategy (doubling the capacity or extending directly when needed) and copies the existing data.

---

## Character Encoding and Decoding

Internally, UTF-8 encoding is used for storage. The conversion methods include:

- `private static int Utf8ByteCount(string s)`  
  Calculates the number of bytes required to encode a string in UTF-8 (ignores surrogate pairs).

- `private static int EncodeUtf8Char(char c, byte* dest)`  
  Encodes a single character in UTF-8, writes it to the destination memory, and returns the number of bytes used.

- `private static int DecodeUtf8Char(byte* ptr, int remaining, out int codepoint)`  
  Decodes the next UTF-8 character from the current buffer, returning the Unicode codepoint and the number of bytes occupied. It supports single-byte as well as multi-byte (2-4 bytes) encodings.

---

## Character Enumeration and Counting

- **Character Enumerator**
  - The `CharEnumerable CharValues` property returns an enumerable character iterator. This iterator implements `IEnumerable<int>` and returns a Unicode codepoint on each iteration.

- `int CharCount()`  
  Iterates over all bytes, decodes them, and counts the total number of characters (by Unicode codepoints).

---

## Character Operations

- `int RemoveAt(int charIndex)`  
  Removes the character at the given character index (based on the decoded order), shifts the following bytes to close the gap, and returns the Unicode codepoint of the removed character.

- `void InsertAt(int charIndex, char c)`  
  Inserts a character at the specified character index. It first determines the byte offset, then moves the required bytes (to ensure contiguous memory) and finally writes the UTF-8 encoded form of the character.

- `void InsertAt(int charIndex, string s)`  
  Inserts a string at the specified character index. The principle is similar to single-character insertion and involves calculating the byte length of the inserted content.

- `int GetByteOffsetForCharIndex(int charIndex)`  
  An internal method that calculates the corresponding byte offset for a given character index. It is used for character positioning.

- `void Push(char c)`  
  Appends a character to the end of the string, equivalent to inserting at the tail.

- `void PushStr(string s)`  
  Appends a string to the end of the string.

- `UnmanagedString SplitOff(int charIndex)`  
  Splits the original string into two parts at the specified character index. The latter part is separated and returned as a new `UnmanagedString`, and the length of the original string is updated to that of the front portion.

- `UnmanagedString Drain(int charIndexStart, int charIndexEnd)`  
  Removes all characters in the specified range of character indices and returns the removed portion as a new `UnmanagedString`. The original string data is adjusted by moving subsequent data to fill the gap.

- `void ReplaceRange(int charIndexStart, int charIndexEnd, UnmanagedString replacement)`  
  Replaces the characters in the specified range with a new `UnmanagedString`. This operation may involve extending the memory or moving data to accommodate the length changes.

- `void Retain(UnmanagedCharPredicate predicate)`  
  Filters and retains characters based on the provided unmanaged character predicate (`UnmanagedCharPredicate`). It iterates through all characters, keeping those for which the predicate returns `true` and removing the others, adjusting the data accordingly.

---

## Encoding Conversion and Debugging

- `IntPtr ToUtf16(out int charCount)`  
  Converts the internally stored UTF-8 data to a UTF-16 (unmanaged memory) representation and returns the pointer to the converted memory. The caller is responsible for eventually freeing the returned memory (using `Marshal.FreeHGlobal`). This method assumes only BMP characters are handled (i.e., surrogate pairs are not processed).

- `public override string ToString()`  
  Used for debugging, it internally calls `ToUtf16` to create a new managed string and returns a debug-friendly string representation. It is recommended not to use this conversion in high-performance scenarios.

---

## Interface Implementations and Operator Overloads

- **IEquatable and IComparable**
  - Overrides the `Equals` method, using a byte-by-byte comparison to determine if the string contents are equal.
  - Overrides the `GetHashCode` method, generating a hash code based on the FNV-1a algorithm using the character data.
  - Implements the `IComparable<UnmanagedString>` interface, comparing byte by byte in lexicographical order.

- **Operator Overloads**
  - Overloads the `==`, `!=`, `<`, `>`, `<=`, and `>=` operators, utilizing the corresponding interface implementations to enable intuitive comparison operations.

---

## Usage Example


```csharp
using System;
using MoreUnmanagedTypes;

class Program
{
    static unsafe void Main()
    {
        // Construct an UnmanagedString
        UnmanagedString ustr = new UnmanagedString("Hello, 世界");
        Console.WriteLine(ustr.ToString()); // Outputs a managed string for debugging purposes

        // Append a character and a string
        ustr.Push('!');
        ustr.PushStr(" Additional content");

        // Count the characters
        int count = ustr.CharCount();
        Console.WriteLine($"Character Count: {count}");

        // Remove the second character
        int removedCp = ustr.RemoveAt(1);
        Console.WriteLine($"Removed Character Codepoint: {removedCp}");

        // Retain only ASCII characters (example: only keep characters with codepoint less than 128)
        ustr.Retain((int cp, int index) => cp < 128);

        Console.WriteLine($"After Filtering: {ustr.ToString()}");

        // Release unmanaged memory
        ustr.Free();
    }
}

```

---

## Caution

- **Memory Management**  
  Since all data is stored in unmanaged memory, be sure to call `Free()` to release the resources and avoid memory leaks.

- **Character Encoding Limitations**  
  The current implementation supports basic UTF-8 encoding and decoding and does not fully support surrogate pairs (handling only BMP characters). Extensions may be necessary for a broader range of characters.

- **Performance**  
  Some methods may encounter performance bottlenecks when copying large amounts of data, so be mindful of efficiency in scenarios with extensive data.

---



---

# UnmanagedString 文档

该文档介绍位于命名空间 `MoreUnmanagedTypes` 中的 `UnmanagedString` 结构体及其相关功能。该结构体用于在非托管内存中以 UTF-8 编码形式存储和操作字符串数据，同时提供了常用的字符串操作方法、字符迭代器以及与托管字符串之间的转换。

---

## 基本结构

- **字段**
  - `byte* Ptr`  
    指向非托管内存中存储 UTF-8 数据的起始地址。
  - `int Length`  
    当前字符串的字节长度（有效数据长度）。
  - `int Capacity`  
    当前已分配的总字节数，表示可用的内存容量。

- **构造函数与静态工厂方法**
  - `UnmanagedString(string s)`  
    根据给定的 C# 字符串构造 UnmanagedString，对字符串进行 UTF-8 编码并分配相应的非托管内存。
  - `static UnmanagedString New()`  
    返回一个空的 UnmanagedString（所有值均为默认）。
  - `static UnmanagedString WithCapacity(int capacity)`  
    根据指定的容量创建一个 UnmanagedString，并分配相应大小的非托管内存。容量为 0 时 `Ptr` 为 `null`。

---

## 内存管理

- `void Free()`  
  释放当前实例占用的非托管内存，并将相关字段重置为默认值。

- `void EnsureCapacity(int required)`  
  检查当前容量，如不足则按一定策略（先翻倍，必要时直接扩展）重新分配内存，并拷贝原有数据。

---

## 字符编码与解码

内部使用 UTF-8 编码进行存储，对字符的转换方法包括：

- `private static int Utf8ByteCount(string s)`  
  计算字符串根据 UTF-8 编码需要的字节数（不处理代理对）。

- `private static int EncodeUtf8Char(char c, byte* dest)`  
  将单个字符转换为 UTF-8 编码，写入目标内存，并返回编码所占用的字节数。

- `private static int DecodeUtf8Char(byte* ptr, int remaining, out int codepoint)`  
  从当前缓冲区解码下一个 UTF-8 字符，返回该字符的码点以及占用的字节数。支持单字节、多字节(2-4字节)的字符编码。

---

## 字符迭代与统计

- **字符枚举器**
  - `CharEnumerable CharValues` 属性返回一个可枚举的字符迭代器。该迭代器实现了 `IEnumerable<int>`，每次迭代返回一个 Unicode 码点。

- `int CharCount()`  
  遍历所有字节，解码统计字符的总个数（以 Unicode 码点计）。

---

## 字符操作

- `int RemoveAt(int charIndex)`  
  根据字符索引（按解码后字符顺序）删除对应字符，移动后续字节填补空缺，并返回被删除字符的 Unicode 码点。

- `void InsertAt(int charIndex, char c)`  
  在指定字符索引处插入一个字符。先确定字节偏移，再移动字节数据（保证内存连续性），最后写入新字符的 UTF-8 编码。

- `void InsertAt(int charIndex, string s)`  
  在指定字符索引处插入一段字符串，原理与单字符插入类似，会计算插入内容的字节长度。

- `int GetByteOffsetForCharIndex(int charIndex)`  
  内部方法，根据字符索引计算对应的字节偏移量。用于对字符定位。

- `void Push(char c)`  
  将字符追加到字符串尾部，等同于在末尾插入。

- `void PushStr(string s)`  
  将字符串追加到字符串尾部。

- `UnmanagedString SplitOff(int charIndex)`  
  以字符索引为界，将原字符串分为前半部分和后半部分。后半部分被分离出来作为新的 UnmanagedString，原字符串长度更新为前半部分。

- `UnmanagedString Drain(int charIndexStart, int charIndexEnd)`  
  删除指定字符索引范围内的字符，并以新的 UnmanagedString 返回被删除部分的内容，同时原字符串数据会自动移动填补删除的部分。

- `void ReplaceRange(int charIndexStart, int charIndexEnd, UnmanagedString replacement)`  
  用新的 UnmanagedString 替换指定区间内字符。涉及内存扩展或数据移动以适应替换后的数据长度变化。

- `void Retain(UnmanagedCharPredicate predicate)`  
  根据传入的非托管字符谓词（`UnmanagedCharPredicate`）过滤保留字符。遍历所有字符，如果谓词返回 `true` 则保留，否则删除，相应数据会被移动整理。

---

## 编码转换与调试

- `IntPtr ToUtf16(out int charCount)`  
  将内部存储的 UTF-8 数据转换为 UTF-16（非托管内存）表示，并返回转换后的内存指针。调用者需要负责最终释放返回的内存（通过 `Marshal.FreeHGlobal`）。此方法假设只处理 BMP 范围内的字符（不处理代理对）。

- `public override string ToString()`  
  用于调试，通过内部调用 `ToUtf16` 构建新的托管字符串，返回调试友好的字符串形式。对于高性能场景不建议使用该转换。

---

## 接口实现和运算符重载

- **IEquatable 与 IComparable**
  - 重写 `Equals` 方法，采用逐字节比较方式判断字符串内容是否一致。
  - 重写 `GetHashCode` 方法，基于 FNV-1a 算法生成字符数据的哈希码。
  - 实现 `IComparable<UnmanagedString>` 接口，采用字节逐一比较（字典序比较）。

- **运算符重载**
  - 重载了 `==`、`!=`、`<`、`>`、`<=`、`>=` 运算符，调用对应的接口实现支持直观的比较操作。

---

## 使用示例


```csharp
using System;
using MoreUnmanagedTypes;

class Program
{
    static unsafe void Main()
    {
        // 构造 UnmanagedString
        UnmanagedString ustr = new UnmanagedString("Hello, 世界");
        Console.WriteLine(ustr.ToString()); // 输出保留调试用途的托管字符串

        // 追加字符和字符串
        ustr.Push('!');
        ustr.PushStr(" 追加内容");

        // 按字符计数
        int count = ustr.CharCount();
        Console.WriteLine($"字符数: {count}");

        // 移除第二个字符
        int removedCp = ustr.RemoveAt(1);
        Console.WriteLine($"移除的字符码点: {removedCp}");

        // 根据谓词保留大写字母（例子：仅保留 ASCII 字符小于 128 的字符）
        ustr.Retain((int cp, int index) => cp < 128);

        Console.WriteLine($"过滤后: {ustr.ToString()}");

        // 释放非托管内存
        ustr.Free();
    }
}

```

---

## 注意事项

- **内存管理**  
  由于所有数据均存储在非托管内存中，务必调用 `Free()` 释放资源，避免内存泄露。

- **字符编码限制**  
  目前实现对 UTF-8 的基础编码和解码，不完全支持代理对（仅处理 BMP 内的字符），在支持大字符范围时可能需要扩展相应逻辑。

- **性能**  
  部分方法在需要复制大量字节数据时可能存在性能瓶颈，使用时请注意数据量较大场景下的效率问题。

---

