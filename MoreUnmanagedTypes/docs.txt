---

**Overview of UnmanagedString**  
`UnmanagedString` is a structure used to store UTF-8 encoded strings in unmanaged memory. This structure not only supports construction and conversion from managed strings, but also provides methods for inserting, deleting characters, and a custom enumerator for iterating over UTF-8 characters in the string.  
Its main fields include:  
- `Ptr`: Points to the starting address of the UTF-8 data stored in the allocated unmanaged memory.  
- `Length`: The current number of bytes occupied by the string.  
- `Capacity`: The total allocated byte capacity.

---

**Main Constructors and Factory Methods**

1. **Constructor `UnmanagedString(string s)`**  
   - **Functionality**: Constructs an instance of `UnmanagedString` from a managed string `s`.  
   - **Process**: Computes the number of bytes required for the UTF-8 encoding of the string, allocates the corresponding unmanaged memory, and encodes each character into UTF-8, storing the result in the allocated memory.  
   - **Note**: Throws an `ArgumentNullException` if the input string is `null`.

2. **Static Factory Method `New()`**  
   - **Functionality**: Returns an initialized `UnmanagedString` instance that is empty and has no allocated memory.

3. **Static Factory Method `WithCapacity(int capacity)`**  
   - **Functionality**: Creates an instance of `UnmanagedString` with a specified pre-allocated capacity.  
   - **Parameter Check**: Throws an `ArgumentOutOfRangeException` if `capacity` is less than 0.

---

**Memory Management Methods**

1. **`Free()`**  
   - **Functionality**: Frees the allocated unmanaged memory and resets the relevant fields (`Ptr`, `Length`, and `Capacity`).

2. **`EnsureCapacity(int required)`**  
   - **Functionality**: Ensures that the string has enough memory to store at least `required` bytes. If not, new memory is allocated; the existing data is copied over to the new allocation, and the old memory is freed.  
   - **Expansion Strategy**: If the initial capacity is insufficient and `Capacity` is 0, it allocates a default of 8 bytes; otherwise, the capacity is doubled.

---

**UTF-8 Encoding and Decoding Support**

1. **`Utf8ByteCount(string s)`**  
   - **Functionality**: Returns the number of bytes required to encode the string `s` in UTF-8.  
   - **Simplification**: Surrogate pairs are not handled separately; only basic multilingual characters are accounted for.

2. **`EncodeUtf8Char(char c, byte* dest)`**  
   - **Functionality**: Encodes a single character `c` into UTF-8 and writes it to the target address `dest`.  
   - **Return Value**: The number of bytes used to encode the character.  
   - **Logic**: Chooses the appropriate number of UTF-8 bytes based on the character's encoding range (ASCII, extended Unicode, etc.).

3. **`DecodeUtf8Char(byte* ptr, int remaining, out int codepoint)`**  
   - **Functionality**: Decodes the UTF-8 byte stream starting at the specified address, returning the decoded Unicode code point and the number of bytes consumed during decoding.  
   - **Checks**: If the available data is insufficient or the byte sequence is invalid, it returns 0 and sets `codepoint` to 0.

---

**Character Enumeration and Counting**

1. **Property `CharValues`**  
   - **Functionality**: Returns a custom enumerator instance for iterating over the UTF-8 encoded characters (represented as Unicode code points) in the string.

2. **Internal Structures `CharEnumerable` and `CharEnumerator`**  
   - `CharEnumerable` implements the `IEnumerable<int>` interface, allowing the use of a `foreach` loop to iterate over the Unicode values of each character in the string.  
   - `CharEnumerator` implements `IEnumerator<int>`, encapsulating the logic for iteration by decoding characters, updating the position until the end of the string is reached.  
   - **Note**: If an invalid UTF-8 sequence is encountered, an `InvalidOperationException` is thrown.

3. **`CharCount()` Method**  
   - **Functionality**: Counts the number of characters in the string by decoding the entire UTF-8 byte array.  
   - **Process**: Decodes the byte array step by step, incrementing the count for each decoded character until all bytes are processed.  
   - **Error Handling**: Throws an `InvalidOperationException` if an invalid UTF-8 sequence is encountered during decoding.

---

**String Insertion and Deletion Operations**

1. **`RemoveAt(int charIndex)`**  
   - **Functionality**: Removes the character at the specified character index from the string.  
   - **Process**:  
     - Translates the character index to a byte offset using the decoding process.  
     - Uses `DecodeUtf8Char` to determine the number of UTF-8 bytes representing the character to be removed.  
   - **Operation**: After deletion, the remaining bytes are moved using `Buffer.MemoryCopy` to cover the removed character's space, and `Length` is updated.  
   - **Return Value**: The Unicode code point of the deleted character.  
   - **Error Handling**: Throws an appropriate exception if the index is invalid or an invalid UTF-8 sequence is encountered.

2. **`InsertAt(int charIndex, char c)` and `InsertAt(int charIndex, string s)`**  
   - **Functionality**: Inserts a character or a string at the specified character index.  
   - **Process**:  
     - First, determines the byte offset for the insertion point using `GetByteOffsetForCharIndex`.  
     - Encodes the content to be inserted into UTF-8 (a single character is at most 4 bytes, while a string is encoded character by character).  
     - Ensures that the memory has enough capacity for the new data (calls `EnsureCapacity`).  
     - Uses `Buffer.MemoryCopy` to move the subsequent existing bytes to make room for the new data, then copies the newly encoded bytes into place.  
   - **Final Step**: Updates `Length`.

3. **Helper Method `GetByteOffsetForCharIndex(int charIndex)`**  
   - **Functionality**: Converts a character index to its corresponding byte offset within the unmanaged memory.  
   - **Process**: Iteratively decodes UTF-8 bytes until the desired character position is reached.

---

**Overridden `ToString()` Method**

- **Functionality**: Converts the UTF-8 byte array stored in unmanaged memory into a managed string.  
- **Process**: Copies the unmanaged memory data into a managed byte array and then converts it using `System.Text.Encoding.UTF8.GetString`.  
- **Special Case**: Returns an empty string if `Length` is 0.

---

**Summary**  
This file implements an unmanaged string container, `UnmanagedString`, which encapsulates manual memory management and UTF-8 encoding/decoding. It provides interfaces for constructing, iterating, modifying, inserting, and deleting operations on strings, suitable for scenarios requiring low-level string manipulation and custom encoding control. Exception handling is integrated to promptly alert the caller when invalid input parameters or memory issues occur.

---




---

**UnmanagedString 概述**  
`UnmanagedString` 是一个用于在非托管内存中保存 UTF-8 编码字符串的结构体。该结构不仅支持通过托管字符串构造和转换，还提供了插入、删除字符的方法以及自定义的枚举器以遍历字符串中的 UTF-8 字符。  
其主要字段包括：  
- `Ptr`: 指向分配内存中保存 UTF-8 数据的起始地址。  
- `Length`: 当前字符串占用的字节数。  
- `Capacity`: 当前分配的总字节空间大小。

---

**主要构造函数与工厂方法**

1. **构造函数 `UnmanagedString(string s)`**  
   - 功能：以托管字符串 `s` 构造 `UnmanagedString` 实例。  
   - 过程：计算字符串的 UTF-8 字节数，分配相应的非托管内存，并逐字符进行 UTF-8 编码存储到分配好的内存中。  
   - 注意：字符串为 `null` 时会抛出 `ArgumentNullException`。

2. **静态工厂方法 `New()`**  
   - 功能：返回一个初始化为空、无分配内存的 `UnmanagedString` 实例。

3. **静态工厂方法 `WithCapacity(int capacity)`**  
   - 功能：创建一个具有指定预分配容量的 `UnmanagedString` 实例。  
   - 参数检查：当 `capacity` 小于 0 时抛出 `ArgumentOutOfRangeException`。

---

**内存管理方法**

1. **`Free()`**  
   - 功能：释放分配的非托管内存，并重置相关字段（`Ptr`、`Length`、`Capacity`）。

2. **`EnsureCapacity(int required)`**  
   - 功能：确保字符串具备足够的内存存储至少 `required` 字节。如不足则分配新的内存，将原有数据复制过去，并释放原有内存。  
   - 扩展策略：初始容量不足时，若 `Capacity` 为 0，默认分配 8 字节；否则以倍数扩展容量。

---

**UTF-8 编码与解码支持**

1. **`Utf8ByteCount(string s)`**  
   - 功能：返回字符串 `s` 经过 UTF-8 编码后所需的字节数。  
   - 简化处理：代理对未单独处理，仅对基本多语言字符进行处理。

2. **`EncodeUtf8Char(char c, byte* dest)`**  
   - 功能：将单个字符 `c` 编码为 UTF-8，并写入目标地址 `dest` 中。  
   - 返回值：编码该字符所占字节数。  
   - 处理逻辑：依据字符编码范围（ASCII、扩展 Unicode 等）选择对应的 UTF-8 编码字节数。

3. **`DecodeUtf8Char(byte* ptr, int remaining, out int codepoint)`**  
   - 功能：从指定地址开始解码 UTF-8 字节流，返回解析出的 Unicode 代码点，并返回解析消耗的字节数。  
   - 检查：若数据不足或者字节序列不正确，则返回 0 并设置 `codepoint` 为 0。

---

**字符遍历和计数**

1. **属性 `CharValues`**  
   - 功能：返回一个用于枚举字符串中 UTF-8 编码字符（以 Unicode 代码点表示）的自定义枚举器实例。

2. **内部结构体 `CharEnumerable` 与 `CharEnumerator`**  
   - `CharEnumerable` 实现了 `IEnumerable<int>` 接口，允许使用 foreach 循环遍历字符串中每个字符的 Unicode 值。  
   - `CharEnumerator` 实现了 `IEnumerator<int>`，封装了遍历逻辑：从当前字符开始解码，更新位置，直至超出字符串长度。  
   - 注意：当遇到非法的 UTF-8 序列时将抛出 `InvalidOperationException`。

3. **`CharCount()` 方法**  
   - 功能：通过解码整个 UTF-8 字节数组来计算字符串中的字符数量。  
   - 过程：逐字节解码，每解码一次计数加 1，直到遍历完所有字节。  
   - 错误处理：如果途中遇到非法 UTF-8 序列，会抛出 `InvalidOperationException`。

---

**字符串插入与删除操作**

1. **`RemoveAt(int charIndex)`**  
   - 功能：移除字符串中指定位置（基于字符索引）的字符。  
   - 过程：先将字符索引转换为字节偏移，然后利用 `DecodeUtf8Char` 得到该字符占用的 UTF-8 字节数。  
   - 操作：删除目标字符后，剩余字节通过 `Buffer.MemoryCopy` 移动至删除位置。最终更新 `Length`。  
   - 返回值：被删除字符的 Unicode 代码点。  
   - 错误处理：非法索引或 UTF-8 序列错误均会抛出相应异常。

2. **`InsertAt(int charIndex, char c)` 与 `InsertAt(int charIndex, string s)`**  
   - 功能：将字符或字符串插入到指定字符索引位置。  
   - 过程：  
     - 先通过 `GetByteOffsetForCharIndex` 方法获取字节偏移位置。  
     - 对插入内容进行 UTF-8 编码（单字符最多 4 字节，多字符时依次编码）。  
     - 为新数据扩容内存（调用 `EnsureCapacity`）。  
     - 使用 `Buffer.MemoryCopy` 移动插入位置后余下的字节，并将新编码数据复制进来。  
   - 最终更新 `Length`。

3. **辅助方法 `GetByteOffsetForCharIndex(int charIndex)`**  
   - 功能：将字符索引转换为在非托管内存中对应的字节偏移。  
   - 过程：逐步解码 UTF-8 字节直到达到指定字符位置。

---

**重写的 `ToString()` 方法**

- 功能：将存储在非托管内存中的 UTF-8 字节数组转换为托管字符串。  
- 过程：先将非托管内存数据复制到一个字节数组中，再利用 `System.Text.Encoding.UTF8.GetString` 进行转换。  
- 特例：当长度为 0 时返回空字符串。

---

**总结**  
该文件实现了一个非托管字符串容器 `UnmanagedString`，通过手动管理内存和 UTF-8 编解码，对内存操作进行封装，提供了构造、遍历、修改、插入、删除等多种操作接口，适合用于需要对字符串进行低级别操作以及自定义编码控制的场景。异常处理方面主要保证了当输入参数不合法或内存状态发生错误时能及时抛出异常提示调用者。

---